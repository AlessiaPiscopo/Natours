*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  font-size: 62.5%; }

body {
  box-sizing: border-box;
  /* White border around entire page */
  /* padding: 3rem; */ }

/* browsers are optimized to animate 2 properties: opacity & transform */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* block elements occupy entire width they have available & create line breaks before & after each element */
  /* fix animation shake */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* 
          animation-delay: 3s; 
          animation-iteration-count: 3;
        */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /* shorthand syntax */
    animation: moveInRight 1s ease-out; }

.btn:link, .btn:visited {
  font-size: 1.6rem;
  letter-spacing: 0.3rem;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  /* remove overlap */
  display: inline-block;
  border-radius: 10rem;
  /* transition is always applied on initial state and applies to all other states */
  transition: all 0.2s;
  /* since inline-block elements are treated like text, we use text-align: center on the parent element (.text-box) to center our button */
  position: relative;
  backface-visibility: hidden; }

.btn:hover {
  /* translate Y goes from top to bottom in CSS (opposite of cartesian plane) */
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
  .btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    /* set opacity to 0 for fade-out */
    opacity: 0; }

.btn:active {
  /* translation here is in relation to original state */
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }
  .btn--white::after {
    background-color: #fff; }

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s; }

.btn--animated {
  animation: moveInBottom 0.5 ease-out 0.75s;
  animation-fill-mode: backwards; }

.row {
  max-width: 114rem;
  background-color: #eee;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    background-color: orangered;
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - (2 * 6rem)) / 3); }
  .row .col-1-of-4 {
    width: calc((100% - (3 * 6rem)) / 4); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - (2 * 6rem)) / 3) + 6rem); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - (3 * 6rem)) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - (3 * 6rem)) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  background-image: linear-gradient(to left bottom, rgba(180, 225, 151, 0.8), rgba(78, 148, 79, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  /* Top of image not cropped when viewport resized */
  background-position: top;
  position: relative;
  /* Specify corners we want to remain visible. All coordinates are in relation to the first point we define (the reference point) and we start at the top left corner.  */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /* When we only set a height or width, the browser sets the width or height respectively */
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    text-align: center;
    /* Center box in middle of parent <header> container. Note that top & left properties center the box starting from the top and left starting points of the child element. */
    top: 50%;
    left: 50%;
    /* We need to center the container from its x-y center. So, we shift this using transform & translate. These values are no longer in relation to the parent element. They are relative to the element itself. */
    transform: translate(-50%, -40%); }
